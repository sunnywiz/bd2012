@model BD2012.Models.BurndownViewModel
@{
    ViewBag.Title = "Burndown";
}

<h1>@Model.Name</h1>

<table>
    <tr>
        <th colspan="1">Item</th>
        @foreach (var col in Model.Columns)
        {
            <th>
                @col
            </th>
        }
    </tr>
    @foreach (var item in Model.AllRows)
    {
        <tr>
            <td>
                <span style="margin-left: @(item.Indent * 20)px">
                    @item.Name
                </span>
            </td>
            @foreach (var col in Model.Columns)
            {
                if (item.IsEditable)
                {
                    string inputName = String.Format("d{0}c{1}", item.Id, col);
                    if (item.Data.ContainsKey(col))
                    { 
                <td>@Html.TextBox(inputName, item.Data[col].ToString())</td>
                    }
                    else
                    { 
                <td>@Html.TextBox(inputName, "")</td>
                    }
                }
                else
                {
                    if (item.Data.ContainsKey(col))
                    { 
                <td>
                    @item.Data[col]
                </td>
                    }
                    else
                    {
                <td />
                    }
                }
            }
        </tr>
    }
</table>
TODO: 
<ul>
    <li>[DONE] A. should calculate all calculatable things (sums) when rendering this view</li>
    <li>B. if the thing is an immediately updateable thing, render as a textbox
        <ul>
            <li>need to update logic so that "immediate entry" is honored (don't show as editable unless column is defined as immediate entry)</li>
        </ul>
    </li>
    <li>B-C. save to update values (saves with current timestamp)</li>
    <li>B-C-D. with some history built up, should allow show graph over time.</li>
    <li>E. ability to configure project - adding columns, edit column, delete column</li>
    <li>F. ability to delete</li>
</ul>
