@model BD2012.Models.BurndownViewModel
@using BD2012.Models
@{
    ViewBag.Title = "Burndown";
}

<h1>@Model.Name</h1>


@using (var form = Html.BeginForm("Burndown", "Project"))
{
    @Html.HiddenFor(m => m.ProjectId)

    <table>
        <tr>
            <th colspan="1">Item</th>
            @foreach (var col in Model.ColumnNames)
            {
                <th>
                    @col
                </th>
            }
        </tr>
        @foreach (var item in Model.AllRows)
        {
            <tr>
                <td>
                    <span style="margin-left: @(item.Indent * 20)px">
                        @item.Name
                    </span>
                </td>
                @foreach (var col in Model.ColumnNames)
                {
                    CellViewModel cvm = null;
                    if (item.Cells.TryGetValue(col, out cvm))
                    {
                        if (cvm.IsEditable)
                        {
                            string inputName = String.Format("update-{0}-{1}", item.Id, col);
                            if (item.Cells.ContainsKey(col))
                            { 
                    <td>@Html.TextBox(inputName, item.Cells[col].Value.ToString())</td>
                            }
                            else
                            { 
                    <td>@Html.TextBox(inputName, "")</td>
                            }
                        }
                        else
                        {
                            if (item.Cells.ContainsKey(col))
                            { 
                    <td>
                        @item.Cells[col].Value
                    </td>
                            }
                            else
                            {
                    <td />
                            }
                        }
                    }
                }
            </tr>
        }
    </table>

    <input type="submit" />    
}
TODO: 
<ul>
    <li>[DONE] A. should calculate all calculatable things (sums) when rendering this view</li>
    <li>[DONE] B. if the thing is an immediately updateable thing, render as a textbox
        <ul>
            <li>[DONE] need to update logic so that "immediate entry" is honored (don't show as editable unless column is defined as immediate entry)</li>
        </ul>
    </li>
    <li>[] B-C. save to update values (saves with current timestamp)
        <ul>
            <li>[DONE] Initially, just update the current value
            </li>
            <li>Then, switch so that a new timestamp entry is written
                <ul>
                    <li>REFACTOR HERE.   We need some new layers: </li>
                    <li>the raw data returned from the database is one
                    </li>
                    <li>the "interpretted" version which sums up stuff and displays the numbers as of a particular time is another</li>
                    <li>then the baseviewmodel which is the dto of what is shown on the screen</li>
                    <li>then the modifyviewmodel which is the additional stuff needed to draw the screen</li>
                    <li>move the code for going from one thingy to the next into a helper class that does conversion</li>
                </ul>
            </li>
            <li>That means that the new timestamp entries have to be considered when drawing the page. </li>
        </ul>
    </li>
    <li>B-C-D. with some history built up, should allow show graph over time.</li>
    <li>E. ability to configure project - adding columns, edit column, delete column</li>
    <li>F. ability to delete</li>
</ul>
